{"ast":null,"code":"export class HTTPService {\n  get(url, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.send();\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    };\n  }\n\n  post(url, data, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader('content-type', 'application/json');\n    xhr.send(typeof data !== 'string' ? JSON.stringify(data) : data);\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    };\n  }\n\n  delete(url, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('DELETE', url);\n    xhr.send();\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    };\n  }\n\n  put(url, data, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', url);\n    xhr.setRequestHeader('content-type', 'application/json');\n    xhr.send(JSON.stringify(data));\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\user_1\\Desktop\\to-do-app-gh-pages\\src\\service\\http-service.js"],"names":["HTTPService","get","url","successCallback","errorCallback","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","status","parsedData","JSON","parse","response","post","data","setRequestHeader","stringify","delete","put"],"mappings":"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","sourcesContent":["export class HTTPService {\n  get(url, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.send();\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if(xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    }\n  }\n\n  post(url, data, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader('content-type', 'application/json');\n    xhr.send((typeof data !== 'string') ? JSON.stringify(data) : data);\n\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if(xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    }\n  }\n\n  delete(url, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('DELETE', url);\n  \n    xhr.send();\n\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if(xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    }\n  }\n\n  put(url, data, successCallback, errorCallback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('PUT', url);\n    xhr.setRequestHeader('content-type', 'application/json');\n    xhr.send(JSON.stringify(data));\n\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if(xhr.status === 200) {\n          const parsedData = JSON.parse(xhr.response);\n          successCallback(parsedData);\n        } else {\n          errorCallback(xhr);\n        }\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}