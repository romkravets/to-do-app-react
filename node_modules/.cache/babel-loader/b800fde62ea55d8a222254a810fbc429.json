{"ast":null,"code":"import auth0 from 'auth0-js';\nimport history from './history';\nexport default class Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-deiz-ep3.auth0.com',\n      clientID: '0pqGrrQRAVBCKmpo5xahtjU5p0Gzcw12',\n      redirectUri: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/callback' : 'https://romkravets.github.io/to-do-app/callback',\n      audience: 'https://dev-deiz-ep3.auth0.com/userinfo',\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          history.replace('/home');\n        } else if (err) {\n          history.replace('/home');\n          console.log(err);\n        }\n      });\n    };\n\n    this.setSession = authResult => {\n      // Set the time that the access token will expire at\n      let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt); // navigate to the home route\n\n      history.replace('/home');\n    };\n\n    this.logout = () => {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at'); // navigate to the home route\n\n      history.replace('/home');\n    };\n\n    this.isAuthenticated = () => {\n      // Check whether the current time is past the\n      // access token's expiry time\n      let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      return new Date().getTime() < expiresAt;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\user_1\\Desktop\\to-do-app-gh-pages\\src\\auth.js"],"names":["auth0","history","Auth","WebAuth","domain","clientID","redirectUri","process","env","NODE_ENV","audience","responseType","scope","login","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","logout","removeItem","isAuthenticated","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,eAAe,MAAMC,IAAN,CAAW;AAAA;AAAA,SAExBF,KAFwB,GAEhB,IAAIA,KAAK,CAACG,OAAV,CAAkB;AACxBC,MAAAA,MAAM,EAAE,wBADgB;AAExBC,MAAAA,QAAQ,EAAE,kCAFc;AAGxBC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,gCAAzC,GAA4E,iDAHjE;AAIxBC,MAAAA,QAAQ,EAAE,yCAJc;AAKxBC,MAAAA,YAAY,EAAE,gBALU;AAMxBC,MAAAA,KAAK,EAAE;AANiB,KAAlB,CAFgB;;AAAA,SAWxBC,KAXwB,GAWhB,MAAM;AACZ,WAAKb,KAAL,CAAWc,SAAX;AACD,KAbuB;;AAAA,SAgBxBC,oBAhBwB,GAgBD,MAAM;AAC3B,WAAKf,KAAL,CAAWgB,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,eAAKC,UAAL,CAAgBH,UAAhB;AACAjB,UAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACD,SAHD,MAGO,IAAIL,GAAJ,EAAS;AACdhB,UAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACD;AACF,OARD;AASD,KA1BuB;;AAAA,SA6BxBI,UA7BwB,GA6BVH,UAAD,IAAgB;AAC3B;AACA,UAAIO,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBT,UAAU,CAACU,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCd,UAAU,CAACC,WAAhD;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCd,UAAU,CAACE,OAA5C;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC,EAL2B,CAM3B;;AACAxB,MAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACD,KArCuB;;AAAA,SAwCxBW,MAxCwB,GAwCf,MAAM;AACb;AACAF,MAAAA,YAAY,CAACG,UAAb,CAAwB,cAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,YAAxB,EAJa,CAKb;;AACAjC,MAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACD,KA/CuB;;AAAA,SAkDxBa,eAlDwB,GAkDN,MAAM;AACtB;AACA;AACA,UAAIV,SAAS,GAAGC,IAAI,CAACU,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,YAArB,CAAX,CAAhB;AACA,aAAO,IAAIR,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACD,KAvDuB;AAAA;;AAAA","sourcesContent":["import auth0 from 'auth0-js';\n\nimport history from './history';\n\nexport default class Auth {\n  // Please use your own credentials here\n  auth0 = new auth0.WebAuth({\n    domain: 'dev-deiz-ep3.auth0.com',\n    clientID: '0pqGrrQRAVBCKmpo5xahtjU5p0Gzcw12',\n    redirectUri: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/callback' : 'https://romkravets.github.io/to-do-app/callback',\n    audience: 'https://dev-deiz-ep3.auth0.com/userinfo',\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  login = () => {\n    this.auth0.authorize();\n  }\n\n  // parses the result after authentication from URL hash\n  handleAuthentication = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        history.replace('/home');\n      } else if (err) {\n        history.replace('/home');\n        console.log(err);\n      }\n    });\n  }\n\n  // Sets user details in localStorage\n  setSession = (authResult) => {\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  // removes user details from localStorage\n  logout = () => {\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  // checks if the user is authenticated\n  isAuthenticated = () => {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n}"]},"metadata":{},"sourceType":"module"}