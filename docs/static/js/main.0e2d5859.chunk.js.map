{"version":3,"sources":["App.js","Home.js","Callback.js","history.js","Routes.js","auth.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","href","target","rel","Home","login","_this","props","auth","logout","isAuthenticated","this","style","cursor","onClick","src_App","Component","Callback","createHistory","basename","auth0","WebAuth","domain","clientID","redirectUri","audience","responseType","scope","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","history","replace","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","removeItem","parse","getItem","Routes","react_router","component","exact","path","render","src_Home","Object","assign","test","location","hash","src_Callback","Boolean","window","hostname","match","ReactDOM","src_Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e2d5859.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport App from './App';\n\nclass Home extends Component {\n  // calls the login method in authentication service\n  login = () => {\n    this.props.auth.login();\n  }\n  // calls the logout method in authentication service\n  logout = () => {\n    this.props.auth.logout();\n  }\n  render() {\n    // calls the isAuthenticated method in authentication service\n    const { isAuthenticated } = this.props.auth;\n    return (\n      <div>\n        {\n          isAuthenticated() &&\n          <div className=\"container column\">\n            <h5>\n              You are logged in!{' '}\n              <a\n                style={{ cursor: 'pointer' }}\n                onClick={this.logout}\n              >\n                Log Out\n              </a>.\n            </h5>\n            <App />\n          </div>\n        }\n        {\n          !isAuthenticated() && (\n            <div className=\"container column\">\n              <h5>ReactiveSearch Auth0 Example</h5>\n              <h5>\n                You are not logged in! Please{' '}\n                <a\n                  style={{ cursor: 'pointer' }}\n                  onClick={this.login}\n                >\n                  Log In\n                </a>\n                {' '}to continue.\n              </h5>\n              <h6>This is the default <b><code>Home</code></b> component. The <b><code>App</code></b> component will only be visible once you authenticate.</h6>\n            </div>\n          )\n        }\n      </div>\n      );\n    }\n  }\n\n  export default Home;","import React from 'react';\n\nconst Callback = () => (\n  <div className=\"container\">\n    <h4>Loading...</h4>\n  </div>\n);\n\nexport default Callback;","import createHistory from 'history/createBrowserHistory';\n\nexport default createHistory({\n  basename: process.env.NODE_ENV === 'development' ? '' : '/to-do-app'\n});","import React from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport Home from './Home';\nimport Callback from './Callback';\nimport Auth from './auth';\nimport history from './history';\n\nconst auth = new Auth();\n\nconst handleAuthentication = (nextState, replace) => {\n  if (/access_token|id_token|error/.test(nextState.location.hash)) {\n    auth.handleAuthentication();\n  }\n}\n\nconst Routes = () => (\n  <Router history={history} component={Home}>\n    <div>\n      <Route exact path=\"/\" render={(props) => <Home auth={auth} {...props} />} />\n      <Route path=\"/home\" render={(props) => <Home auth={auth} {...props} />} />\n      <Route path=\"/callback\" render={(props) => {\n        handleAuthentication(props);\n        return <Callback {...props} />\n      }}/>\n    </div>\n  </Router>\n);\n\nexport default Routes;","import auth0 from 'auth0-js';\n\nimport history from './history';\n\nexport default class Auth {\n  // Please use your own credentials here\n  auth0 = new auth0.WebAuth({\n    domain: 'dev-deiz-ep3.auth0.com',\n    clientID: '0pqGrrQRAVBCKmpo5xahtjU5p0Gzcw12',\n    redirectUri: process.env.NODE_ENV === 'development' ? 'http://localhost:3000/callback' : 'https://romkravets.github.io/to-do-app/callback',\n    audience: 'https://dev-deiz-ep3.auth0.com/userinfo',\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  login = () => {\n    this.auth0.authorize();\n  }\n\n  // parses the result after authentication from URL hash\n  handleAuthentication = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        history.replace('/home');\n      } else if (err) {\n        history.replace('/home');\n        console.log(err);\n      }\n    });\n  }\n\n  // Sets user details in localStorage\n  setSession = (authResult) => {\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  // removes user details from localStorage\n  logout = () => {\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  // checks if the user is authenticated\n  isAuthenticated = () => {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}